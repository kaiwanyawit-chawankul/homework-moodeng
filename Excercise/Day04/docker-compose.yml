version: '3.7'

services:

  # Nginx for static file serving
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.nginx  # The Dockerfile for Nginx
    container_name: nginx-server
    ports:
      - "80:80"  # Expose Nginx on port 80
    volumes:
      - ./nginx/static:/usr/share/nginx/html  # Bind static files to Nginx container
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf  # Use the custom Nginx config
    networks:
      - analytics-net

  # Scala Backend (Akka HTTP)
  scala-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile  # Make sure this points to the Dockerfile for the Scala app
    container_name: scala-backend
    ports:
      - "8080:8080"  # Expose the Scala backend on port 8080
    # depends_on:
    #   - kafka
    #   - redis
    #   - cassandra
    networks:
      - analytics-net

  # zookeeper:
  #   image: wurstmeister/zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - analytics-net
  # kafka:
  #   image: wurstmeister/kafka
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
  #     KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_CREATE_TOPICS: "testing:1:1"
  #   networks:
  #     - analytics-net

  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   hostname: kafka
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #     - "9093:9093"
  #   environment:
  #     KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
  #     KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
  #     KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"  # Defines the controller voters.
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
  #     KAFKA_LOG_DIRS: /var/lib/kafka/data  # Where Kafka stores its logs.
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since weâ€™re running one broker, one replica is enough.
  #     KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
  #     CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"  # A unique ID for the Kafka cluster.
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./kafka_data:/var/lib/kafka/data  # Store Kafka logs on your local machine.
  #   networks:
  #     - analytics-net

  # cassandra:
  #   image: cassandra:latest
  #   container_name: cassandra
  #   ports:
  #     - "9042:9042"
  #   volumes:
  #     - ./cassandra-data:/var/lib/cassandra
  #   networks:
  #     - analytics-net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - analytics-net

  # processing-service:
  #   image: processing-service:latest
  #   container_name: processing-service
  #   depends_on:
  #     - kafka
  #     - cassandra
  #     - redis
  #   networks:
  #     - analytics-net

  processing-backend:
    build:
      context: ./consumer
      dockerfile: Dockerfile.consumer  # Make sure this points to the Dockerfile for the Scala app
    container_name: processing-backend
    ports:
      - "8081:8081"  # Expose the Scala backend on port 8080
    # depends_on:
    #   - kafka
    #   - redis
    #   - cassandra
    networks:
      - analytics-net

  # processing-backend2:
  #   build:
  #     context: ./consumer2
  #     dockerfile: Dockerfile  # Make sure this points to the Dockerfile for the Kotlin app
  #   container_name: processing-backend2
  #   ports:
  #     - "8082:8082"  # Expose the Kotlin backend on port 8082
  #   # depends_on:
  #   #   - kafka
  #   #   - redis
  #   #   - cassandra
  #   networks:
  #     - analytics-net

volumes:
  kafka_data:
  cassandra-data:

networks:
  analytics-net:
    driver: bridge
